# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type storage_daemon, sadomain, domain;
type storage_daemon_exec, exec_attr, file_attr, system_file_attr;
type dev_block_volfile, dev_attr;

define(`storage_daemon_relabel', `
    allow storage_daemon $1:{ file dir sock_file } { relabelto setattr };
    allow storage_daemon $1:dir { search };
')
storage_daemon_relabel(data_user_file);
storage_daemon_relabel(data_service_el1_i18n_libphonenumber_file);
storage_daemon_relabel(data_service_el1_i18n_taboo_file);
storage_daemon_relabel(data_service_el1_i18n_timezone_file);
storage_daemon_relabel(data_service_el2_hmdfs);
storage_daemon_relabel(data_service_el2_public_huksService_file);
storage_daemon_relabel(data_service_el2_userId_huksService_file);
storage_daemon_relabel(data_service_el4_userId_huksService_file);

storage_daemon_relabel(account_data_el2_file);

allow storage_daemon data_user_file:lnk_file { relabelto setattr };

# avc:  denied  { get } for service=3901 sid=u:r:storage_daemon:s0 scontext=u:r:storage_daemon:s0 tcontext=u:object_r:sa_param_watcher:s0 tclass=samgr_class permissive=0
allow storage_daemon sa_param_watcher:samgr_class { get };

# avc:  denied  { call } for pid=714, comm="/system/bin/storage_daemon"  scontext=u:r:storage_daemon:s0 tcontext=u:r:param_watcher:s0 tclass=binder permissive=0
# avc:  denied  { transfer } for pid=719, comm="/system/bin/storage_daemon"  scontext=u:r:storage_daemon:s0 tcontext=u:r:param_watcher:s0 tclass=binder permissive=0
allow storage_daemon param_watcher:binder { transfer call };

# avc:  denied  { getattr } for pid=719 comm="/system/bin/storage_daemon" path="/system/bin/storage_daemon" dev="overlay" ino=862 scontext=u:r:storage_daemon:s0 tcontext=u:object_r:storage_daemon_exec:s0 tclass=file permissive=0
# avc:  denied  { open } for pid=714 comm="/system/bin/storage_daemon" path="/system/bin/storage_daemon" dev="overlay" ino=862 scontext=u:r:storage_daemon:s0 tcontext=u:object_r:storage_daemon_exec:s0 tclass=file permissive=0
allow storage_daemon storage_daemon_exec:file { getattr open };