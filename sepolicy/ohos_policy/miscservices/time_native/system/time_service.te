# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

allow time_service sa_foundation_abilityms:samgr_class { get };
allow time_service foundation:binder { call transfer };
allow time_service accesstoken_service:binder { call };
allow time_service time_service:capability { sys_time };
allow time_service sa_accesstoken_manager_service:samgr_class { get };
allow time_service sa_param_watcher:samgr_class { get };
allow time_service dev_rtc_file:chr_file { ioctl open read write};
allowxperm time_service dev_rtc_file:chr_file ioctl 0x700a;
allow time_service node:udp_socket { node_bind };
allow time_service time_service:capability2 { wake_alarm };
allow time_service time_service:udp_socket { bind connect create read setopt write};
allow time_service dev_unix_socket:dir { search };
allow time_service normal_hap_attr:binder { call transfer };
allow time_service system_core_hap_attr:binder { call transfer };
allow time_service system_basic_hap_attr:binder { call transfer };
allow time_service time_param:parameter_service { set };
allow domain time_param:file { map open read };
allow time_service kernel:unix_stream_socket { connectto };
allow time_service paramservice_socket:sock_file { write };
allow time_service sa_device_standby:samgr_class { get };
binder_call(time_service, powermgr);
allow time_service sa_powermgr_powermgr_service:samgr_class { get };
debug_only(`
    allow time_service sh:binder { call };
    allow time_service su:binder { call transfer };
	allow time_service su:process { signal };
')
#avc:  denied  { write } for pid=936 comm="IPC_5_2549" name="dnsproxyd" dev="tmpfs" ino=805 scontext=u:r:time_service:s0 tcontext=u:dev_unix_file:sock_file:s0 tclass=sock_file permissive=1
allow time_service dev_unix_file:sock_file { write };
allow time_service wifi_manager_service:binder { call transfer };
allow time_service data_service_el1_file:file { ioctl lock };
allowxperm time_service data_service_el1_file:file ioctl { 0xf50c };
allow time_service dev_ashmem_file:chr_file { open };
allow time_service dev_kmsg_file:chr_file { write };
allow time_service tty_device:chr_file { read write };
allow time_service dev_console_file:chr_file { read write };
allow time_service sysfs_devices_system_cpu:file { read };
allow time_service data_service_el1_file:file { getattr };
allow time_service sysfs_devices_system_cpu:file { open };
allow time_service data_service_el1_file:file { map };
allow time_service sa_huks_service:samgr_class { get };
allow bgtaskmgr_service sa_powermgr_powermgr_service:samgr_class { get };
allow time_service sysfs_devices_system_cpu:file { getattr };
allow time_service huks_service:binder { call };
allow time_service data_service_el1_file:dir { read open };
allow time_service hiviewdfx_hiview_param:file { read };
allow time_service dev_bbox:chr_file { write };
allow time_service data_service_el1_file:dir { remove_name unlink };
allow time_service data_service_el1_file:file { unlink };
allow time_service distributeddata:binder { call };

