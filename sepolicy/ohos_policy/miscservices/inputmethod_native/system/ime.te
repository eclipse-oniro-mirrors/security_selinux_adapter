# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

debug_only(`
    # for ime run
    domain_auto_transition_pattern(su, ime_exec, ime);

    allow ime su:fd { use };
    allow ime su:fifo_file { ioctl read write };
    allow ime su:unix_stream_socket { read write };
    allowxperm ime su:fifo_file ioctl { 0x5413 };
')

developer_only(`
    #avc: denied { search } for pid=16766, comm="/bin/ime"  name="/service" dev="/dev/block/platform/fa500000.ufs/by-name/userdata" ino=9 scontext=u:r:ime:s0 tcontext=u:object_r:data_service_file:s0 tclass=dir permissive=0
    allow ime data_service_file:dir { search };
    #avc: denied { search } for pid=16766, comm="/bin/ime"  name="/lib64" dev="overlay" ino=1 scontext=u:r:ime:s0 tcontext=u:object_r:chip_prod_file:s0 tclass=dir permissive=0
    allow ime chip_prod_file:dir { search };
    #avc: denied { use } for pid=16766, comm="/bin/ime"  path="pipe:[2999]" dev="tmpfs" ino=2999 scontext=u:r:ime:s0 tcontext=u:r:hdcd:s0 tclass=fd permissive=0
    allow ime hdcd:fd { use };
    # avc:  denied  { read write } scontext=u:r:ime:s0 tcontext=u:object_r:tty_device:s0 tclass=chr_file permissive=0
    allow ime tty_device:chr_file { read write };
    # avc:  denied  { search } for scontext=u:r:ime:s0 tcontext=u:object_r:dev_unix_socket:s0 tclass=dir permissive=0
    allow ime dev_unix_socket:dir { search };
    # avc:  denied  { map open read} scontext=u:r:ime:s0 tcontext=u:object_r:arkcompiler_param:s0 tclass=file permissive=0
    allow ime arkcompiler_param:file { map open read };
    allow ime ark_writeable_param:file { map open read };
    # avc:  denied  { map open read } scontext=u:r:ime:s0 tcontext=u:object_r:debug_param:s0 tclass=file permissive=0
    allow ime debug_param:file { map open read };
    # avc:  denied  { read } scontext=u:r:ime:s0 tcontext=u:object_r:hilog_param:s0 tclass=file permissive=0
    allow ime hilog_param:file { read map open };
    # avc:  denied  { search } scontext=u:r:samgr:s0 tcontext=u:r:ime:s0 tclass=dir permissive=0
    allow samgr ime:dir { search };
    # avc:  denied  { transfer } scontext=u:r:samgr:s0 tcontext=u:r:ime:s0 tclass=binder permissive=0
    allow samgr ime:binder { transfer };
    # avc:  denied  { open } scontext=u:r:samgr:s0 tcontext=u:r:ime:s0 tclass=file permissive=0
    # avc:  denied  { read } scontext=u:r:samgr:s0 tcontext=u:r:ime:s0 tclass=file permissive=0
    allow samgr ime:file { open read };
    # avc:  denied  { getattr } scontext=u:r:samgr:s0 tcontext=u:r:ime:s0 tclass=process permissive=0
    allow samgr ime:process { getattr };
    # avc:  denied  { ioctl read write } scontext=u:r:ime:s0 tcontext=u:object_r:devpts:s0 tclass=chr_file permissive=0
    allow ime devpts:chr_file { ioctl read write };
    allowxperm ime devpts:chr_file ioctl { 0x5413 };

    #for ime run
    domain_auto_transition_pattern(sh, ime_exec, ime);
    
    allow ime samgr:binder { call };
    allow ime sa_inputmethod_service:samgr_class { get };
    allow ime inputmethod_service:binder { call transfer };
    allow inputmethod_service ime:binder { call transfer };
    allow ime sh:fd { use };
    allow ime sh:fifo_file { ioctl read write };
    allow ime sh:unix_stream_socket { read write };
    allowxperm ime sh:fifo_file ioctl { 0x5413 };
')
