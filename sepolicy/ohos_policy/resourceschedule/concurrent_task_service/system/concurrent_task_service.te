# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type concurrent_task_service, sadomain, domain;

#service_binder
allow concurrent_task_service foundation:binder { call transfer };

#system
allow concurrent_task_service system_basic_hap_attr:process { setsched };
allow concurrent_task_service system_core_hap_attr:process { setsched };
allow concurrent_task_service system_usr_file:dir { search map };
allow concurrent_task_service system_usr_file:file { getattr read };
allow concurrent_task_service system_lib_file:dir { search };
allow concurrent_task_service system_lib_file:file { getattr map open read };
allow concurrent_task_service system_etc_file:dir { search };
allow concurrent_task_service system_etc_file:file { getattr map open read };
allow concurrent_task_service vendor_etc_file:dir { search };
allow concurrent_task_service vendor_etc_file:file { getattr map open read };
allow concurrent_task_service sa_concurrent_task_service:samgr_class { add };
#ui_service
allow concurrent_task_service ui_service:process { setsched };
#normal_hap
allow concurrent_task_service normal_hap_attr:process { setsched };
#rtg_dev
allow concurrent_task_service dev_sched_rtg_ctrl:chr_file { ioctl open read write };
allow concurrent_task_service dev_auth_ctrl:chr_file { ioctl open read write };
#dev
allow concurrent_task_service dev_unix_socket:dir { search };
allow concurrent_task_service dev_unix_socket:sock_file { write };
allow concurrent_task_service hilog_param:file { map open read };
allow concurrent_task_service debug_param:file { map open read };
#persist param
allow concurrent_task_service paramservice_socket:sock_file { write };
allow concurrent_task_service kernel:unix_stream_socket { connectto };
allow concurrent_task_service persist_param:file { read open map };
allow concurrent_task_service persist_param:parameter_service { set };
#cgroup
allow concurrent_task_service cgroup:dir { search open read write };
allow concurrent_task_service cgroup:file { open read write };
