# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#resource_schedule_service
allow resource_schedule_service accesstoken_service:binder { call };
allow resource_schedule_service foundation:binder { call transfer };
binder_call(resource_schedule_service, powermgr);
allow resource_schedule_service hiview:binder { call transfer };
allow resource_schedule_service param_watcher:binder { call transfer };
allow resource_schedule_service bgtaskmgr_service:binder { call transfer };
allow resource_schedule_service audio_server:binder { call transfer };
allow resource_schedule_service msdp_sa:binder { call transfer };
allow resource_schedule_service bluetooth_service:binder { call };
allow resource_schedule_service locationhub:binder { call };
allow resource_schedule_service av_session:binder { call transfer };
allow resource_schedule_service appspawn:dir { search };
allow resource_schedule_service appspawn:file { getattr open read };
allow resource_schedule_service appspawn_exec:file { open read };
allow resource_schedule_service cgroup:dir { add_name write search };
allow resource_schedule_service cgroup:file { append getattr ioctl open read write };
allow resource_schedule_service chip_prod_file:dir { search };
allow resource_schedule_service data_service_el1_file:dir { add_name create getattr open read remove_name rmdir search write };
allow resource_schedule_service data_service_el1_file:file { create getattr ioctl lock open read unlink write };
allow resource_schedule_service device_manager:file { read };
# avc: denied { transfer } for pid=892, comm="/system/bin/sa_main" scountext=u:resource_schedule_service:s0 tcountext=u:r:distributeddata:s0 tclass=binder permissive=0
# Before obtaining the application list, the rss service needs to call the DataShare interface to query the database information to check whether the user agrees to the authorization
allow resource_schedule_service distributeddata:binder { transfer };
allow resource_schedule_service hdf_devmgr:file { read };
allow resource_schedule_service hilogd:file { read };
allow resource_schedule_service vendor_bin_file:dir { search };
allow resource_schedule_service vendor_file:dir { search };
allow resource_schedule_service vendor_file:file { execute getattr map open read };
allow resource_schedule_service vendor_etc_file:dir { search };
allow resource_schedule_service vendor_etc_file:file { getattr map open read };
allow resource_schedule_service system_basic_hap_attr:dir { open read search };
allow resource_schedule_service system_basic_hap_attr:file { getattr open read };
allow resource_schedule_service system_basic_hap_attr:process { setsched };
allow resource_schedule_service system_core_hap_attr:dir { open read search };
allow resource_schedule_service system_core_hap_attr:file { getattr open read };
allow resource_schedule_service system_core_hap_attr:process { setsched };
allow resource_schedule_service system_usr_file:dir { search map };
allow resource_schedule_service system_usr_file:file { getattr read };
allow resource_schedule_service system_etc_file:dir { search };
allow resource_schedule_service system_etc_file:file { getattr map open read };
allow resource_schedule_service tracefs:dir { search };
allow resource_schedule_service tracefs_trace_marker_file:file { open write };
allow resource_schedule_service dev_console_file:chr_file { read write };
allow resource_schedule_service dev_unix_socket:dir { search };
allow resource_schedule_service ui_service:process { setsched };
allow resource_schedule_service normal_hap_attr:dir { open read search };
allow resource_schedule_service normal_hap_attr:file { getattr open read };
allow resource_schedule_service normal_hap_attr:process { setsched };
allow resource_schedule_service resource_schedule_service:unix_dgram_socket { getopt setopt };
allow resource_schedule_service data_log:file { read write };
allow resource_schedule_service faultloggerd:fd { use };
allow resource_schedule_service faultloggerd:unix_stream_socket { connectto };
allow resource_schedule_service init:dir { search };
allow resource_schedule_service init:file { getattr open read };
allow resource_schedule_service limit_domain:dir { search };
allow resource_schedule_service limit_domain:file { getattr open read };
allow resource_schedule_service kernel:dir { search };
allow resource_schedule_service kernel:file { getattr open read };
allow resource_schedule_service kernel:key { search };
allow resource_schedule_service lib_file:lnk_file { read };
allow resource_schedule_service musl_param:file { open read map };
allow resource_schedule_service resource_schedule_service:netlink_socket { read };
allow resource_schedule_service proc_file:file { read open };
allow resource_schedule_service param_watcher:file { read };
debug_only(`
    allow resource_schedule_service sh_exec:file { execute_no_trans map open read };
')
allow resource_schedule_service sys_file:file { getattr write open ioctl create read };
allow resource_schedule_service sys_file:dir { open read search };
allow resource_schedule_service system_file:file { open read };
allow resource_schedule_service sys_prod_file:dir { search };
allow resource_schedule_service sys_prod_file:file { open read };
allow resource_schedule_service sysfs_devices_system_cpu:file { getattr write open ioctl create read };
allow resource_schedule_service sysfs_devices_system_cpu:dir { open read search };
allow resource_schedule_service storage_daemon:file { read };
allow resource_schedule_service storage_manager:file { read };
allow resource_schedule_service tty_device:chr_file { open read write };
allow resource_schedule_service dev_sched_rtg_ctrl:chr_file { ioctl open read write };
allowxperm resource_schedule_service dev_file:chr_file ioctl { 0x7102  0x7104 0x7165 };
allowxperm resource_schedule_service dev_sched_rtg_ctrl:chr_file ioctl { 0xab01 0xab02 };
allowxperm resource_schedule_service cgroup:file ioctl { 0x5413 };
allowxperm resource_schedule_service sys_file:file ioctl { 0x5413 };
allowxperm resource_schedule_service data_service_el1_file:file ioctl { 0x5413 0xf501 0xf502 0xf50c };
allow resource_schedule_service sa_pulseaudio_audio_service:samgr_class { get };
allow resource_schedule_service sa_audio_policy_service:samgr_class { get };
allow resource_schedule_service ueventd:dir { search };
allow resource_schedule_service ueventd:file { getattr open read };
allow resource_schedule_service watchdog_service:dir { search };
allow resource_schedule_service watchdog_service:file { getattr open read };
# Subscribing to public events is required.
# acv: denied  { get } for service=1152  pid=641 scontext=u:r:resource_schedule_service:s0 tcontext=u:object_r:sa_foundation_cesfwk_service:s0 tclass=samgr_class permissive=1 
allow resource_schedule_service sa_foundation_cesfwk_service:samgr_class { get };
# Standby management SIM card.
# avc: denied  { call } for pid=679 comm="IPC_3_2276" scontext=u:r:resource_schedule_service:s0 tcontext=u:r:telephony_sa:s0 tclass=binder permissive=1
allow resource_schedule_service telephony_sa:binder { call };
# Standby moden enables or disables data services.
# avc: denied  { get } for service=4010  pid=675 scontext=u:r:resource_schedule_service:s0 tcontext=u:object_r:sa_telephony_tel_core_service:s0 tclass=samgr_class permissive=1
allow resource_schedule_service sa_telephony_tel_core_service:samgr_class { get };
# Standby management Determine data status Service requirements.
# avc: denied  { get } for service=4007  pid=668 scontext=u:r:resource_schedule_service:s0 tcontext=u:object_r:sa_telephony_tel_cellular_data:s0 tclass=samgr_class permissive=1
allow resource_schedule_service sa_telephony_tel_cellular_data:samgr_class { get };
# Standby control network restriction.
# avc: denied  { get } for service=1152  pid=641 scontext=u:r:resource_schedule_service:s0 tcontext=u:object_r:sa_net_policy_manager:s0 tclass=samgr_class permissive=1
allow resource_schedule_service sa_net_policy_manager:samgr_class { get };
# avc: denied  { add } for pid=946,comm="/system/bin/sa_man" scontext=u:r:sa_device_standby:s0 tcontext=u:r:resource_schedule_service:s0 tclass=samgr_class permissive=1
# avc: denied  { get } for service=1043  pid=622 scontext=u:r:resource_schedule_service:s0 tcontext=u:object_r:sa_device_standby:s0 tclass=samgr_class permissive=1
allow resource_schedule_service sa_device_standby:samgr_class { add get };
# Standby This parameter is required when the monitoring device is ststionary.
# avc: denied  { call } for pid=681 comm="IPC_2_14413" scontext=u:r:resource_schedule_service:s0 tcontext=u:r:sensors:s0 tclass=binder permissive=1
allow resource_schedule_service sensors:binder { call };
# avc: denied  { transfer } for pid=657 comm="IPC_3_2264" scontext=u:r:resource_schedule_service:s0 tcontext=u:r:transfer:s0 tclass=binder permissive=1
allow resource_schedule_service sensors:binder { transfer };
allow resource_schedule_service sa_sensor_service:samgr_class { get };
allow resource_schedule_service sa_powermgr_battery_service:samgr_class { get };
allow resource_schedule_service sa_powermgr_powermgr_service:samgr_class { get };
allow resource_schedule_service sa_time_service:samgr_class { get };
allow resource_schedule_service sa_foundation_bms:samgr_class { get };
allow resource_schedule_service sa_task_heartbeat_mgr:samgr_class { add get };
allow bgtaskmgr_service sa_device_standby:samgr_class { get };
allow normal_hap_attr sa_device_standby:samgr_class { get };
allow system_basic_hap_attr sa_device_standby:samgr_class { get };
allow system_core_hap_attr sa_device_standby:samgr_class { get };
allow resource_schedule_service multimodalinput:binder { call };
allow resource_schedule_service multimodalinput:fd { use };
allow resource_schedule_service multimodalinput:unix_stream_socket { write };
allow resource_schedule_service memmgrservice:binder { call };
allow resource_schedule_service sa_comm_net_stats_manager_service:samgr_class { get };
# for RegisterDisplayModeListener on observer_manager.cpp
allow resource_schedule_service sa_foundation_dms:samgr_class { get };
debug_only(`
    allow resource_schedule_service sh:dir { search };
    allow resource_schedule_service sh:file { open };
    allow resource_schedule_service sh:binder { call };
')

#systemload
#set : allow resource_schedule_service set system parameter to record systemload level
allow resource_schedule_service resourceschedule_writeable_param:parameter_service { set };
#call : allow rss to read normal_hap_attr/system_basic_hap_attr/system_core_hap_attr register systemload callback
#transfer : allow rss to transfer result to normal_hap_attr/system_basic_hap_attr/system_core_hap_attr
allow resource_schedule_service normal_hap_attr:binder { call transfer };
allow resource_schedule_service system_basic_hap_attr:binder { call transfer };
allow resource_schedule_service system_core_hap_attr:binder { call transfer };

#proc_protect_lru
# avc: denied { search } for pid=873, comm="/system/bin/sa_main" scountext=u:resource_schedule_service:s0 tcountext=u:r:data_service_file:s0 tclass=dir permissive=0
allow resource_schedule_service data_service_file:dir { search };
# avc: denied { open read search } for pid=873, comm="/system/bin/sa_main" scountext=u:resource_schedule_service:s0 tcountext=u:r:system_fonts_file:s0 tclass=dir permissive=0
allow resource_schedule_service system_fonts_file:dir { open read search };

# resource_schedule_service config
allow resource_schedule_service sys_prod_ressched_file:dir { search };
allow resource_schedule_service sys_prod_ressched_file:file { getattr open read };

#for os_account_manager binder
allow resource_schedule_service accountmgr:binder { transfer };
allow accountmgr resource_schedule_service:binder { call };
