# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#avc:  denied  { transfer } for  pid=478 comm="camera_service" scontext=u:r:camera_service:s0 tcontext=u:r:dcamera:s0 tclass=binder permissive=0
allow camera_service dcamera:binder { transfer };

debug_only(`
    allow camera_service sh:binder { call transfer };
')

#avc:  denied  { get } for service=401 pid=599 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_bms:s0 tclass=samgr_class permissive=1
allow camera_service sa_foundation_bms:samgr_class { get };

allow camera_service camera_service:unix_dgram_socket { getopt setopt};

allow camera_service normal_hap_attr:binder { call transfer};

allow camera_service accesstoken_service:binder { call transfer };

allow camera_service privacy_service:binder { call transfer };
allow privacy_service camera_service:binder { call transfer };
allow camera_service sa_privacy_service:samgr_class { get };
allow camera_service sa_sensor_service:samgr_class { get add};
allow camera_service sensors:binder { call transfer };
#avc:  denied  { get } for service=camera_image_process_service pid=1392 scontext=u:r:camera_service:s0 tcontext=u:object_r:hdf_camera_image_process_service:s0 tclass=hdf_devmgr_class permissive=1
allow camera_service hdf_camera_image_process_service:hdf_devmgr_class { get };
#avc:  denied  { use } for  pid=3966 comm="OS_FFRT_2_1" path="/dev/ashmem" dev="tmpfs" ino=630 scontext=u:r:camera_service:s0 tcontext=u:r:cameradaemon:s0 tclass=fd permissive=1
#avc:  denied  { use } for  pid=3966 comm="OS_FFRT_2_1" path="/dmabuf:" dev="dmabuf" ino=35644 scontext=u:r:camera_service:s0 tcontext=u:r:cameradaemon:s0 tclass=fd permissive=1
#allow camera_service cameradaemon:fd { use };
allow camera_service foundation:binder { transfer };
binder_call(camera_service, powermgr);
#avc:  denied  { get } for service=3303 pid=1767 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_powermgr_thermal_service:s0 tclass=samgr_class permissive=0
allow camera_service sa_powermgr_thermal_service:samgr_class { get };
#avc:  denied  { get } for service=3299 pid=1767 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_cesfwk_service:s0 tclass=samgr_class permissive=0
allow camera_service sa_foundation_cesfwk_service:samgr_class { get };

#avc:  denied  { get } for service=allocator_service pid=8082 scontext=u:r:camera_service:s0 tcontext=u:object_r:hdf_allocator_service:s0 tclass=hdf_devmgr_class permissive=0
allow camera_service hdf_allocator_service:hdf_devmgr_class { get };
#avc: denied { call } for pid=1478, comm="/system/bin/sa_main"  scontext=u:r:camera_service:s0 tcontext=u:r:allocator_host:s0 tclass=binder permissive=0
allow camera_service allocator_host:binder { call };
#avc: denied { use } for pid=1386, comm="/vendor/bin/hdf_devhost"  path="anon_inode:dmabuf" dev="" ino=0 scontext=u:r:camera_service:s0 tcontext=u:r:allocator_host:s0 tclass=fd permissive=0
allow camera_service allocator_host:fd { use };
#avc:  denied  { get } for service=3009 pid=1472 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_audio_policy_service:s0 tclass=samgr_class permissive=0
allow camera_service sa_audio_policy_service:samgr_class { get };
#avc: denied { call } for pid=1478, comm="/system/bin/sa_main"  scontext=u:r:camera_service:s0 tcontext=u:r:audio_policy:s0 tclass=binder permissive=0
allow camera_service audio_server:binder { call transfer };
allow camera_service sa_pulseaudio_audio_service:samgr_class { get };
allow camera_service sa_av_codec_service:samgr_class { get };
allow camera_service av_codec_service:binder { call transfer };
allow camera_service codec_host:fd { use };
#avc: denied { read } for pid=1474, comm="/system/bin/sa_main"  path="/system/lib64/media/media_plugins" dev="/dev/block/platform/fa500000.ufs/by-name/system" ino=5362 scontext=u:r:camera_service:s0 tcontext=u:object_r:system_lib_file:s0 tclass=dir permissive=0
allow camera_service system_lib_file:dir { open read };
#avc: denied { open } for pid=1469, comm="/system/bin/sa_main"  path="/dev/ashmem" dev="" ino=1 scontext=u:r:camera_service:s0 tcontext=u:object_r:dev_ashmem_file:s0 tclass=chr_file permissive=0
allow camera_service dev_ashmem_file:chr_file { open };
#avc: denied { search } for pid=1469, comm="/system/bin/sa_main"  name="/data" dev="/dev/block/platform/fa500000.ufs/by-name/userdata" ino=3615 scontext=u:r:camera_service:s0 tcontext=u:object_r:data_data_file:s0 tclass=dir permissive=0
allow camera_service data_data_file:dir { search write add_name };
allow camera_service data_data_file:file { create open read write };
allow camera_service hmdfs:file { read write };
#avc: denied { use } for pid=5703, comm="/system/bin/appspawn"  path="/storage/cloud/files/Photo/1/IMG_27156725_001.mp4" dev="/data/service/el2/100/hmdfs/account" ino=11529215046068485401 scontext=u:r:camera_service:s0 tcontext=u:r:medialibrary_hap:s0 tclass=fd permissive=0
allow camera_service medialibrary_hap:fd { use };
#avc: denied { get } for service=180 pid=1480 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_abilityms:s0 tclass=samgr_class permissive=0
allow camera_service sa_foundation_abilityms:samgr_class { get };
#avc:  denied  { get } for service=501 pid=1448 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_appms:s0 tclass=samgr_class permissive=0
allow camera_service sa_foundation_appms:samgr_class {get};
allow camera_service distributeddata:binder { call };
allow camera_service dev_kmsg_file:chr_file { write };
allow camera_service tty_device:chr_file { read write };
allow camera_service chip_prod_file:dir { search };
allow camera_service normal_hap:fd { use };
allow camera_service sa_distributeddata_service:samgr_class { get };
allow camera_service distributeddata:fd { use };
allow camera_service sa_media_monitor:samgr_class { get };
