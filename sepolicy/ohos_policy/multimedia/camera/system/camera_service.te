# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#avc:  denied  { transfer } for  pid=478 comm="camera_service" scontext=u:r:camera_service:s0 tcontext=u:r:dcamera:s0 tclass=binder permissive=0
allow camera_service dcamera:binder { transfer };

debug_only(`
    allow camera_service sh:binder { call transfer };
')

#avc:  denied  { get } for service=401 pid=599 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_bms:s0 tclass=samgr_class permissive=1
allow camera_service sa_foundation_bms:samgr_class { get };

allow camera_service camera_service:unix_dgram_socket { getopt setopt};

allow camera_service normal_hap_attr:binder { call transfer};

allow camera_service accesstoken_service:binder { call transfer };

allow camera_service privacy_service:binder { call transfer };
allow privacy_service camera_service:binder { call transfer };
allow camera_service sa_privacy_service:samgr_class { get };
allow camera_service sa_sensor_service:samgr_class { get add};
allow camera_service sensors:binder { call transfer };
#avc:  denied  { get } for service=camera_image_process_service pid=1392 scontext=u:r:camera_service:s0 tcontext=u:object_r:hdf_camera_image_process_service:s0 tclass=hdf_devmgr_class permissive=1
allow camera_service hdf_camera_image_process_service:hdf_devmgr_class { get };
#avc:  denied  { use } for  pid=3966 comm="OS_FFRT_2_1" path="/dev/ashmem" dev="tmpfs" ino=630 scontext=u:r:camera_service:s0 tcontext=u:r:cameradaemon:s0 tclass=fd permissive=1
#avc:  denied  { use } for  pid=3966 comm="OS_FFRT_2_1" path="/dmabuf:" dev="dmabuf" ino=35644 scontext=u:r:camera_service:s0 tcontext=u:r:cameradaemon:s0 tclass=fd permissive=1
#allow camera_service cameradaemon:fd { use };
allow camera_service foundation:binder { transfer };
binder_call(camera_service, powermgr);
#avc:  denied  { get } for service=3303 pid=1767 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_powermgr_thermal_service:s0 tclass=samgr_class permissive=0
allow camera_service sa_powermgr_thermal_service:samgr_class { get };
#avc:  denied  { get } for service=3299 pid=1767 scontext=u:r:camera_service:s0 tcontext=u:object_r:sa_foundation_cesfwk_service:s0 tclass=samgr_class permissive=0
allow camera_service sa_foundation_cesfwk_service:samgr_class { get };
