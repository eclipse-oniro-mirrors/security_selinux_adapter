# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# avc:  denied  { read write } for  pid=602 comm="sa_main" path="/dev/console" dev="tmpfs" ino=39 scontext=u:r:drm_service:s0 tcontext=u:object_r:dev_console_file:s0 tclass=chr_file permissive=1
allow drm_service dev_console_file:chr_file { read write };

# avc:  denied  { getattr } for  pid=602 comm="drm_service" path="/dev" dev="tmpfs" ino=1 scontext=u:r:drm_service:s0 tcontext=u:object_r:dev_file:s0 tclass=dir permissive=1
allow drm_service dev_file:dir { getattr };

# avc:  denied  { get } for service=clearplay_service pid=602 scontext=u:r:drm_service:s0 tcontext=u:object_r:hdf_clearplay_service:s0 tclass=hdf_devmgr_class permissive=1
allow drm_service hdf_clearplay_service:hdf_devmgr_class { get };

# avc:  denied  { getattr } for  pid=602 comm="drm_service" path="/sys/devices/system/cpu/online" dev="sysfs" ino=4917 scontext=u:r:drm_service:s0 tcontext=u:object_r:sysfs_devices_system_cpu:s0 tclass=file permissive=1
# avc:  denied  { open } for  pid=602 comm="drm_service" path="/sys/devices/system/cpu/online" dev="sysfs" ino=4917 scontext=u:r:drm_service:s0 tcontext=u:object_r:sysfs_devices_system_cpu:s0 tclass=file permissive=1
# avc:  denied  { read } for  pid=602 comm="drm_service" name="online" dev="sysfs" ino=4917 scontext=u:r:drm_service:s0 tcontext=u:object_r:sysfs_devices_system_cpu:s0 tclass=file permissive=1
allow drm_service sysfs_devices_system_cpu:file { getattr open read };
#avc:  denied  { transfer } for  pid=478 comm="camera_service" scontext=u:r:camera_service:s0 tcontext=u:r:dcamera:s0 tclass=binder permissive=0
allow drm_service dcamera:binder { transfer };

debug_only(`
    allow drm_service sh:binder { call transfer };
')

#avc:  denied  { get } for service=401 pid=599 scontext=u:r:drm_service:s0 tcontext=u:object_r:sa_foundation_bms:s0 tclass=samgr_class permissive=1
allow drm_service sa_foundation_bms:samgr_class { get };

allow drm_service camera_service:unix_dgram_socket { getopt setopt};

allow drm_service normal_hap_attr:binder { call transfer};

allow drm_service accesstoken_service:binder { call transfer };

allow drm_service privacy_service:binder { call transfer };
allow privacy_service drm_service:binder { call transfer };
allow drm_service sa_privacy_service:samgr_class { get };
# avc:  denied  { get } for service=clearplay_service pid=602 scontext=u:r:drm_service:s0 tcontext=u:object_r:hdf_clearplay_service:s0 tclass=hdf_devmgr_class permissive=1
allow drm_service hdf_clearplay_service:hdf_devmgr_class { get };
allow drm_service data_system:file { create read open getattr write ioctl };

# avc:  denied  { transfer } for  pid=608 comm="OS_IPC_2_1673" scontext=u:r:drm_service:s0 tcontext=u:r:media_service:s0 tclass=binder permissive=1
allow drm_service media_service:binder { transfer };

# avc:  denied  { use } for  pid=568 comm="multiqueue4:src" path="/dev/ashmem" dev="tmpfs" ino=238 scontext=u:r:drm_service:s0 tcontext=u:r:media_service:s0 tclass=fd permissive=1
allow drm_service media_service:fd { use };
